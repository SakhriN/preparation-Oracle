{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1036{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang12  1. Given the following code snippet, which options correctly create a\par
 parallel stream? (Choose all that apply.)\par
 var c = List.of(19, 66);\par
 var s = ThreadLocalRandom.current().doubles();\par
 var p = ________________;\par
 A. new ParallelStream(s)\par
B. c.parallel()\par
 C. s.parallelStream()\par
 D. c.parallelStream()\par
 E. new ParallelStream(c)\par
 F. s.parallel()\par
 2. Given that the sum of the numbers from 1 (inclusive) to 10 (exclusive)\par
 is 45, what are the possible results of executing the following\par
 program? (Choose all that apply.)\par
 1:  import java.util.concurrent.locks.*;\par
 2:  import java.util.stream.*;\par
 3:  public class Bank \{\par
 4:     private Lock vault = new ReentrantLock();\par
 5:     private int total = 0;\par
 6:     public void deposit(int value) \{\par
 7:        try \{\par
 8:           vault.tryLock();\par
 9:           total += value;\par
 10:       \} finally \{ vault.unlock(); \}\par
 11:    \}\par
 12:    public static void main(String[] unused) \{\par
 13:       var bank = new Bank();\par
 14:       IntStream.range(1, 10).parallel()\par
 15:          .forEach(s -> bank.deposit(s));\par
 16:       System.out.println(bank.total);\par
 17:    \} \}\par
 A. 45 is printed.\par
 B. A number less than 45 is printed.\par
 C. A number greater than 45 is printed.\par
 D. An exception is thrown.\par
 E. None of the above, as the code does not compile.\par
 3. Which of the following statements about the Callable call() and\par
 Runnable run() methods are correct? (Choose all that apply.)\par
 A. Both methods return void.\par
 B. Both can throw unchecked exceptions.\par
C. Both can be implemented with lambda expressions.\par
 D. Runnable returns a generic type.\par
 E. Both can throw checked exceptions.\par
 F. Callable returns a generic type.\par
 4. Which lines need to be changed to make the code compile?\par
 try (ExecutorService service =         // w1\par
   Executors.newSingleThreadScheduledExecutor()) \{\par
   service.scheduleWithFixedDelay(() -> \{\par
      System.out.println("Open Zoo");\par
      return null;                     // w2\par
   \}, 0, 1, TimeUnit.MINUTES);\par
   var result = service.submit(() ->   // w3\par
      System.out.println("Wake Staff"));\par
   System.out.println(result.get());\par
 \}\par
 A. Only line w1.\par
 B. Only line w2.\par
 C. Only line w3.\par
 D. Line w1 and w2.\par
 E. Line w1 and w2.\par
 F. Line w1 and w3.\par
 G. None of the above; the code compiles.\par
 5. What statement about the following code is true?\par
 var value1 = new AtomicLong(0);\par
 final long[] value2 = \{0\};\par
 IntStream.iterate(1, i -> 1).limit(100).parallel()\par
   .forEach(i -> value1.incrementAndGet());\par
 IntStream.iterate(1, i -> 1).limit(100).parallel()\par
   .forEach(i -> ++value2[0]);\par
 System.out.println(value1 + " " + value2[0]);\par
 A. It outputs 100 100.\par
 B. It outputs 100 99.\par
C. The output cannot be determined ahead of time.\par
 D. The code does not compile.\par
 E. It compiles but throws an exception at runtime.\par
 F. It compiles but enters an infinite loop at runtime.\par
 G. None of the above.\par
 6. Which statements about the following code are correct? (Choose all\par
 that apply.)\par
 var data = List.of(2, 5, 1, 9, 8);\par
 data.stream().parallel()\par
   .mapToInt(s -> s)\par
   .peek(System.out::print)\par
   .forEachOrdered(System.out::print);\par
 A. The peek() method will print the entries in the sorted order:\par
 12589.\par
 B. The peek() method will print the entries in the original order:\par
 25198.\par
 C. The peek() method will print the entries in an order that cannot\par
 be determined ahead of time.\par
 D. The forEachOrdered() method will print the entries in the sorted\par
 order: 12589.\par
 E. The forEachOrdered() method will print the entries in the\par
 original order: 25198.\par
 F. The forEachOrdered() method will print the entries in an order\par
 that cannot be determined ahead of time.\par
 G. The code does not compile.\par
 7. Fill in the blanks: __________ occur(s) when two or more threads are\par
 blocked forever but both appear active. _______ occur(s) when two or\par
 more threads try to complete a related task at the same time, resulting\par
 in invalid or unexpected data.\par
 A. Livelock, Deadlock\par
 B. Deadlock, Starvation\par
C. Race conditions, Deadlock\par
 D. Livelock, Race conditions\par
 E. Starvation, Race conditions\par
 F. Deadlock, Livelock\par
 8. Assuming this class is accessed by only a single thread at a time, what\par
 is the result of calling the countIceCreamFlavors() method?\par
 import java.util.stream.LongStream;\par
 public class Flavors \{\par
   private static int counter;\par
   public static void countIceCreamFlavors()  \{\par
      counter = 0;\par
      Runnable task = () -> counter++;\par
      LongStream.range(0, 500)\par
         .forEach(m -> Thread.ofPlatform()\par
           .priority(1)\par
           .unstarted(task)\par
           .run());\par
      System.out.println(counter);\par
   \} \}\par
 A. The method consistently prints a number less than 500.\par
 B. The method consistently prints 500.\par
 C. The method compiles and prints a value, but that value cannot be\par
 determined ahead of time.\par
 D. The method does not compile.\par
 E. The method compiles but throws an exception at runtime.\par
 F. None of the above.\par
 9. Which are true of ExecutorService? (Choose all that apply.)\par
 A. If a task is submitted when no threads are available, the executor\par
 discards the task without completing it.\par
 B. If a task is submitted when no threads are available, the executor\par
 adds the task to an internal queue and completes when there is an\par
 available thread.\par
C. If a task is submitted when no threads are available, the thread\par
 submitting the task waits on the submit call until a thread is\par
 available before continuing.\par
 D. Platform threads can be pooled using ExecutorService, but not\par
 virtual threads.\par
 E. Virtual threads can be pooled using ExecutorService, but not\par
 platform threads.\par
 F. Both platform threads and virtual threads can be pooled using\par
 ExecutorService.\par
 10. What is the result of executing the following code snippet?\par
 SequencedCollection<Integer> lions = new ArrayList<>\par
 (List.of(1, 2, 3));\par
 SequencedCollection<Integer> tigers = new \par
CopyOnWriteArrayList<>(lions);\par
 Set<Integer> bears = new ConcurrentSkipListSet<>();\par
 bears.addAll(lions);\par
 for (Integer item: tigers) tigers.add(4); // x1\par
 for (Integer item: bears) bears.add(5);   // x2\par
 System.out.println(lions.size() + " " + tigers.size()\par
   + " " + bears.size());\par
 A. It outputs 3 6 4.\par
 B. It outputs 6 6 6.\par
 C. It outputs 6 3 4.\par
 D. The code does not compile.\par
 E. It compiles but throws an exception at runtime on line x1.\par
 F. It compiles but throws an exception at runtime on line x2.\par
 G. It compiles but enters an infinite loop at runtime.\par
 11. What statement about the following code is true?\par
 Integer i1 = List.of(1, 2, 3, 4, \par
5).stream().findAny().get();\par
 synchronized(i1) \{ // y1\par
   Integer i2 = List.of(6, 7, 8, 9, 10)\par
      .parallelStream()\par
      .sorted()\par
      .findAny().get(); // y2\par
   System.out.println(i1 + " " + i2);\par
 \}\par
 A. The first value printed is always 1.\par
 B. The second value printed is always 6.\par
 C. The code will not compile because of line y1.\par
 D. The code will not compile because of line y2.\par
 E. The code compiles but throws an exception at runtime.\par
 F. The output cannot be determined ahead of time.\par
 G. It compiles but waits forever at runtime.\par
 12. Assuming each call to takeNap() takes five seconds to execute\par
 without throwing an exception, what is the expected result of\par
 executing the following code snippet? (Choose all that apply.)\par
 public void shutdown() throws InterruptedException \{\par
   var service = Executors.newFixedThreadPool(4);\par
   try \{\par
      service.execute(() -> takeNap());\par
      service.execute(() -> takeNap());\par
      service.execute(() -> takeNap());\par
   \} finally \{\par
      service.shutdown();\par
   \}\par
   service.awaitTermination(2, TimeUnit.SECONDS);\par
   System.out.println("DONE!");\par
 \}\par
 public void refactored() \{\par
   try (var service = Executors.newFixedThreadPool(4)) \{\par
      service.execute(() -> takeNap());\par
      service.execute(() -> takeNap());\par
      service.execute(() -> takeNap());\par
   \}\par
   System.out.println("DONE!");\par
 \}\par
 A. shutdown() will pause for approximately 2 seconds and then\par
 print DONE!.\par
 B. shutdown() will pause for approximately 5 seconds and then\par
 print DONE!.\par
C. shutdown() will pause for approximately 15 seconds and then\par
 print DONE!.\par
 D. refactored() will pause for approximately 2 seconds and then\par
 print DONE!.\par
 E. refactored() will pause for approximately 5 seconds and then\par
 print DONE!.\par
 F. refactored() will pause for approximately 15 seconds and then\par
 print DONE!.\par
 G. One of the methods returns the result immediately.\par
 H. One of the methods throws an exception.\par
 13. What statement about the following code is true?\par
 System.out.print(List.of("duck","flamingo","pelican")\par
   .parallelStream().parallel()   // q1\par
   .reduce(0,\par
      (c1, c2) -> c1.length() + c2.length(),  // q2\par
      (s1, s2) -> s1 + s2));      // q3\par
 A. It compiles and runs without issue, outputting the total length of\par
 all strings in the stream.\par
 B. The code will not compile because of line q1.\par
 C. The code will not compile because of line q2.\par
 D. The code will not compile because of line q3.\par
 E. It compiles but throws an exception at runtime.\par
 F. None of the above.\par
 14. What statements about the following code snippet are true? (Choose\par
 all that apply.)\par
 Object o1 = new Object();\par
 Object o2 = new Object();\par
 try (var service = Executors.newFixedThreadPool(2)) \{\par
   var f1 = service.submit(() -> \{\par
      synchronized (o1) \{\par
         synchronized (o2) \{ System.out.print("Tortoise"); \par
\}\par
      \}\par
   \});\par
   var f2 = service.submit(() -> \{\par
      synchronized (o2) \{\par
         synchronized (o1) \{ System.out.print("Hare"); \}\par
      \}\par
   \});\par
   f1.get();\par
   f2.get();\par
 \}\par
 A. The code will always output Tortoise followed by Hare.\par
 B. The code will always output Hare followed by Tortoise.\par
 C. If the code does output anything, the order cannot be determined.\par
 D. The code does not compile.\par
 E. The code compiles but may produce a deadlock at runtime.\par
 F. The code compiles but may produce a livelock at runtime.\par
 G. It compiles but throws an exception at runtime.\par
 15. Which statement about the following code snippet is correct?\par
 2: var cats = Stream.of("leopard", "lynx", "ocelot", \par
"puma")\par
 3:    .parallel();\par
 4: var bears = \par
Stream.of("panda","grizzly","polar").parallel();\par
 5: var data = Stream.of(cats,bears).flatMap(s -> s)\par
 6:    .collect(Collectors.groupingByConcurrent(\par
 7:       s -> !s.startsWith("p")));\par
 8: System.out.println(data.get(false).size()\par
 9:    + " " + data.get(true).size());\par
 A. It outputs 3 4.\par
 B. It outputs 4 3.\par
 C. The code will not compile because of line 6.\par
 D. The code will not compile because of line 7.\par
 E. The code will not compile because of line 8.\par
 F. It compiles but throws an exception at runtime.\par
16. Which APIs exist for creating or working with platform threads?\par
 (Choose all that apply.)\par
 A. Executors.newCachedThreadPool()\par
 B. Executors.newPlatformThreadPool()\par
 C. Executors.newPlatformThreadPerTaskExecutor()\par
 D. new Thread()\par
 E. Thread.ofPlatform()\par
 F. Thread.ofPlatformThread()\par
 17. Which statement about methods in ReentrantLock is correct?\par
 A. The lock() method will attempt to acquire a lock without waiting\par
 indefinitely for it.\par
 B. The testLock() method will attempt to acquire a lock without\par
 waiting indefinitely for it.\par
 C. The attemptLock() method will attempt to acquire a lock\par
 without waiting indefinitely for it.\par
 D. By default, a ReentrantLock fairly releases to each thread in the\par
 order in which it was requested.\par
 E. Calling the unlock() method once will release a resource so that\par
 other threads can obtain the lock.\par
 F. None of the above.\par
 18. Which of the following lambda expressions are valid Callable\par
 expressions? (Choose all that apply.)\par
 A. a -> \{return 10;\}\par
 B. () -> \{String s = "";\}\par
 C. () -> 5\par
 D. () -> \{return null\}\par
 E. () -> "The" + "Zoo"\par
 F. (int count) -> count+1\par
G. () -> \{System.out.print("Giraffe"); return 10;\}\par
 19. What is the result of executing the following application? (Choose all\par
 that apply.)\par
 import java.util.concurrent.*;\par
 import java.util.stream.*;\par
 public class PrintConstants \{\par
   public static void main(String[] args) \{\par
      var s = Executors.newVirtualThreadPerTaskExecutor();\par
      DoubleStream.of(3.14159, 2.71828)   // b1\par
         .forEach(c -> s.submit(          // b2\par
            () -> System.out.println(10 * c))); // b3\par
      s.execute(() -> System.out.println("Printed"));\par
   \} \}\par
 A. It compiles and outputs the two numbers followed by Printed.\par
 B. The code will not compile because of line b1.\par
 C. The code will not compile because of line b2.\par
 D. The code will not compile because of line b3.\par
 E. It compiles, but the output cannot be determined ahead of time.\par
 F. It compiles but throws an exception at runtime.\par
 G. It compiles but waits forever at runtime.\par
 20. What is the result of executing the following program?\par
 import java.util.*;\par
 import java.util.concurrent.*;\par
 import java.util.stream.*;\par
 public class PrintCounter \{\par
   static int count = 0;\par
   public static void main(String[] args) throws\par
                     InterruptedException, \par
ExecutionException \{\par
      try (var service = \par
Executors.newSingleThreadExecutor()) \{\par
         var r = new ArrayList<Future<?>>();\par
         IntStream.iterate(0,i -> i + 1).limit(5).forEach(\par
            i -> r.add(service.execute(() -> \{count++;\})) \par
// n1\par
         );\par
         for (Future<?> result : r) \{\par
            System.out.print(result.get() + " "); // n2\par
         \}\par
      \}\par
   \} \}\par
 A. It prints 0 1 2 3 4\par
 B. It prints 1 2 3 4 5\par
 C. It prints null null null null null\par
 D. It hangs indefinitely at runtime.\par
 E. The output cannot be determined.\par
 F. The code will not compile because of line n1.\par
 G. The code will not compile because of line n2.\par
 21. Given the following code snippet and blank lines on p1 and p2, which\par
 values guarantee that 1 is printed at runtime? (Choose all that apply.)\par
 var data = List.of(List.of(1, 2),\par
   List.of(3, 4),\par
   List.of(5, 6));\par
 data._______________  // p1\par
   .flatMap(s -> s.stream())\par
   .________________  // p2\par
   .ifPresent(System.out::print);\par
 A. stream() on line p1, findFirst() on line p2.\par
 B. stream() on line p1, findAny() on line p2.\par
 C. parallelStream() on line p1, findAny() on line p2.\par
 D. parallelStream() on line p1, findFirst() on line p2.\par
 E. The code does not compile regardless of what is inserted into the\par
 blanks.\par
 F. None of the above.\par
 22. Assuming one minute is enough time for the tasks submitted to the\par
 service executor to complete, what is the result of executing\par
 countSheep()?\par
import java.util.concurrent.*;\par
 import java.util.concurrent.atomic.*;\par
 public class BedTime \{\par
   private AtomicInteger s1 = new AtomicInteger(0); // w1\par
   private int s2 = 0;\par
   private void countSheep() throws InterruptedException \{\par
      try (var service = \par
Executors.newSingleThreadExecutor()) \{ // w2\par
         for (int i = 0; i < 100; i++)\par
         service.execute(() -> \{\par
            s1.getAndIncrement(); s2++; \}); // w3\par
         Thread.sleep(60_000);\par
         System.out.println(s1 + " " + s2);\par
      \}\par
   \}\par
   public static void main(String\'85 nap)\par
     throws InterruptedException \{\par
      new BedTime().countSheep();\par
   \} \}\par
 A. The method consistently prints 100 99.\par
 B. The method consistently prints 100 100.\par
 C. The output cannot be determined ahead of time.\par
 D. The code will not compile because of line w1.\par
 E. The code will not compile because of line w2.\par
 F. The code will not compile because of line w3.\par
 G. It compiles but throws an exception at runtime.\par
 23. What is the result of executing the following application?\par
 import java.util.concurrent.*;\par
 import java.util.stream.*;\par
 public class StockRoomTracker \{\par
   public static void await(CyclicBarrier cb) \{ // j1\par
      try \{ cb.await(); \} catch (Exception e) \{\}\par
   \}\par
   public static void main(String[] args) \{\par
      var cb = new CyclicBarrier(10,\par
         () -> System.out.println("Stock Room Full!")); // \par
j2\par
      IntStream.iterate(1, i -> 1).limit(9).parallel()\par
         .forEach(i -> await(cb)); // j3\par
   \} \}\par
 A. It outputs Stock Room Full!\par
 B. The code will not compile because of line j1.\par
 C. The code will not compile because of line j2.\par
 D. The code will not compile because of line j3.\par
 E. It compiles but throws an exception at runtime.\par
 F. It compiles but waits forever at runtime.\par
 24. What statements about the following class definition are true? (Choose\par
 all that apply.)\par
 public final class TicketManager \{\par
   private int tickets;\par
   private static TicketManager instance;\par
   private TicketManager() \{\}\par
   static synchronized TicketManager getInstance() \{      \par
// k1\par
      if (instance==null) instance = new TicketManager(); \par
// k2\par
   \}\par
      return instance;\par
   public int getTicketCount() \{ return tickets; \}\par
   public void addTickets(int value) \{tickets += value;\}  \par
// k3\par
   public void sellTickets(int value) \{\par
      synchronized (this) \{                               \par
// k4\par
         tickets -= value;\par
      \} \} \}\par
 A. It compiles without issue.\par
 B. The code will not compile because of line k2.\par
 C. The code will not compile because of line k3.\par
 D. The locks acquired on k1 and k4 are on the same object.\par
 E. The class correctly protects the tickets data from race\par
 conditions.\par
F. At most one instance of TicketManager will be created in an\par
 application that uses this class.\par
 25. Assuming an implementation of the performCount() method is\par
 provided prior to runtime, which of the following are possible results\par
 of executing the following application? (Choose all that apply.)\par
 import java.util.*;\par
 import java.util.concurrent.*;\par
 public class CountZooAnimals \{\par
   public static void performCount(int animal) \{\par
      // IMPLEMENTATION OMITTED\par
   \}\par
   public static void printResults(Future<?> f) \{\par
      try \{\par
         System.out.println(f.get(1, TimeUnit.DAYS)); // o1\par
      \} catch (Exception e) \{\par
         System.out.println("Exception!");\par
      \}\par
   \}\par
   public static void main(String[] args) throws Exception \par
\{\par
 o2\par
      final var r = new ArrayList<Future<?>>();\par
      try (var s = Executors.newSingleThreadExecutor()) \{\par
         for (int i = 0; i < 10; i++) \{\par
            final int animal = i;\par
            r.add(s.submit(() -> performCount(animal))); // \par
         \}\par
         r.forEach(f -> printResults(f));\par
      \}\par
   \} \}\par
 A. It outputs a number 10 times.\par
 B. It outputs a Boolean value 10 times.\par
 C. It outputs a null value 10 times.\par
 D. It outputs Exception! 10 times.\par
 E. The code will not compile because of line o1.\par
 F. The code will not compile because of line o2.\par
}
 