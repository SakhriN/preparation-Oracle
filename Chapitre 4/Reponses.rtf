{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1036{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang12  1. F. Line 5 does not compile. This question is checking to see whether\par
 you are paying attention to the types. numFish is an int, and 1 is an\par
 int. Therefore, we use numeric addition and get 5. The problem is that\par
 we can\rquote t store an int in a String variable. Suppose line 5 said String\par
 anotherFish = numFish + 1 + "";. In that case, the answers would\par
 be option A and option C. The variable defined on line 5 would be the\par
 string "5", and both output statements would use concatenation.\par
 2. C, E, F. Option C uses the variable name as if it were a type, which is\par
 clearly illegal. Options E and F don\rquote t specify any size. Although it is\par
 legal to leave out the size for later dimensions of an array of arrays, the\par
 first one is required. Option A declares a legal 2D array. Option B\par
 declares a legal 3D array. Option D declares a legal 2D array.\par
 Remember that it is normal to see classes on the exam you might not\par
 have learned. You aren\rquote t expected to know anything about them.\par
 3. A, C, D. Option B throws an exception because there is no March 40.\par
 Option E also throws an exception because 2029 isn\rquote t a leap year and\par
 therefore has no February 29. Option F doesn\rquote t compile because the\par
 enum should be named Month, rather than MonthEnum. Option D is\par
 correct because it is just a regular date and has nothing to do with\par
 daylight saving time. Options A and C are correct because Java is\par
 smart enough to adjust for daylight saving time.\par
 4. A, C, D. The code compiles fine. Line 3 points to the String in the\par
 string pool. Line 4 calls the String constructor explicitly and is\par
 therefore a different object than s. Line 5 checks for object equality,\par
 which is true, and so it prints one. Line 6 uses object reference\par
 equality, which is not true since we have different objects. Line 7 calls\par
 intern(), which returns the value from the string pool and is therefore\par
 the same reference as s. Line 8 also compares references but is true\par
 since both references point to the object from the string pool. Finally,\par
 line 9 is a trick. The string Hello is already in the string pool, so\par
 calling intern() does not change anything. The reference t is a\par
 different object, so the result is still false. Therefore, options A, C,\par
 and D are correct.\par
5. B. This example uses method chaining. After the call to append(), sb\par
 contains "aaa". That result is passed to the first insert() call, which\par
 inserts at index 1. At this point, sb contains abbaa. That result is\par
 passed to the final insert(), which inserts at index 4, resulting in\par
 abbaccca. Therefore, option B is the answer.\par
 6. C. Remember to watch return types on math operations. One of the\par
 tricks is line 24. The round() method returns an int when called with\par
 a float. However, we are calling it with a double, so it returns a long.\par
 The other trick is line 25. The random() method returns a double.\par
 Since two lines have a compiler error, option C is the answer.\par
 7. A, E. When dealing with time zones, it is best to convert to GMT first\par
 by subtracting the time zone. Remember that subtracting a negative is\par
 like adding. The first date/time is 9:00 GMT, and the second is 15:00\par
 GMT. Therefore, the first one is earlier by six hours. Therefore,\par
 options A and E are correct.\par
 8. A, B, F. Remember that indexes are zero-based, which means index 4\par
 corresponds to 5, and option A is correct. For option B, the replace()\par
 method starts the replacement at index 2 and ends before index 4. This\par
 means two characters are replaced, and charAt(3) is called on the\par
 intermediate value of 1265. The character at index 3 is 5, making\par
 option B correct. Option C is similar, making the intermediate value\par
 126 and returning 6.\par
 Option D results in an exception since there is no character at index 5.\par
 Option E is incorrect. It does not compile because the parentheses for\par
 the length() method are missing. Finally, option F\rquote s replace results\par
 in the intermediate value 145. The character at index 2 is 5, so option F\par
 is correct.\par
 9. A, C, F. Arrays are zero-indexed, making option A correct and option\par
 B incorrect. They are not able to change size, which is option C. The\par
 values can be changed, making option D incorrect. An array does not\par
 override equals(), so it uses object equality. Since two different\par
 objects are not equal, option F is correct, and options E and G are\par
 incorrect.\par
10. A. All of these lines compile. The min() and floor() methods return\par
 the same type passed in: int and double, respectively. The round()\par
 method returns a long when called with a double. Option A is correct\par
 since the code compiles.\par
 11. E. A LocalDate does not have a time element. Therefore, there is no\par
 method to add hours, making option E the answer.\par
 12. A, D, E. First, notice that the indent() call adds a blank space to the\par
 beginning of numbers, and stripLeading() immediately removes it.\par
 The substring() method has two forms. The first takes the index to\par
 start with and the index to stop immediately before. The second takes\par
 just the index to start with and goes to the end of the String.\par
 Remember that indexes are zero-based. The first call starts at index 1\par
 and ends with index 2 since it needs to stop before index 3. This gives\par
 us option A. The second call starts at index 7 and ends in the same\par
 place, resulting in an empty String, which is option E. This prints out\par
 a blank line. The final call starts at index 7 and goes to the end of the\par
 String finishing up with option D.\par
 13. B. A String is immutable. Calling concat() returns a new String but\par
 does not change the original. A StringBuilder is mutable. Calling\par
 append() adds characters to the existing character sequence along with\par
 returning a reference to the same object. Therefore, option B is correct.\par
 14. B, F. Options A and C are incorrect because there is no asTime() or\par
 withTime() method defined on LocalDate. Option B correctly creates\par
 a LocalDateTime from a LocalDate and LocalTime. Option E is\par
 incorrect because Instant, like other date/time classes, does not have\par
 a public constructor and is instantiated via methods. Option F is the\par
 proper conversion. Option D is incorrect because the source object\par
 does not represent a point in time. Without a time zone, Java doesn\rquote t\par
 know what moment in time to use for the Instant.\par
 15. C, E. Numbers sort before letters, and uppercase sorts before\par
 lowercase. This makes option C one of the answers. The\par
 binarySearch() method looks at where a value would be inserted,\par
 which is before the second element for Pippa. It then negates it and\par
 subtracts one, which is option E.\par
16. A, G. The substring() method includes the starting index but not the\par
 ending index. When called with 1 and 2, it returns a single-character\par
 String, making option A correct and option E incorrect. Calling\par
 substring() with 2 as both parameters is legal. It returns an empty\par
 String, making options B and F incorrect. Java does not allow the\par
 indexes to be specified in reverse order. Option G is correct because it\par
 throws a StringIndexOutOfBoundsException. Finally, option H is\par
 incorrect because it returns an empty String.\par
 17. C, F. This question is tricky because it has several parts. First, you\par
 have to know that the text block on lines 13 and 14 is equivalent to a\par
 regular String. Since there is no line break at the end, this is four\par
 characters. Then, you have to know that String objects are immutable,\par
 which means the results of lines 17\f1\endash 19 are ignored. Finally, on line 20,\par
 something happens. We concatenate three new characters to s1 and\par
 now have a String of length 7, making option C correct.\par
 Next, s2 += 2 expands to s2 = s2 + 2. A String concatenated with\par
 any other type gives a String. Lines 22, 23, and 24 all append to s2,\par
 giving a result of "2cfalse". The if statement on line 27 returns true\par
 because the values of the two String objects are the same using object\par
 equality. For this reason, option F is correct. The if statement on line\par
 26 returns false because the two String objects are not the same in\par
 memory. One comes directly from the string pool, and the other comes\par
 from building using String operations.\par
 18. A, B, D. The compare() method returns a positive integer when the\par
 arrays are different and the first is larger. This is the case for option A\par
 since the s2 element at index 1 comes first alphabetically. It is not the\par
 case for option C because the s4 is longer or for option E because the\par
 arrays are the same.\par
 The mismatch() method returns a positive integer when the arrays are\par
 different in a position index 1 or greater. This is the case for options B\par
 and D since the difference is at index 1. It is not the case for option F\par
 because there is no difference.\par
 19. A, D. The dateTime1 object has a time of 1:30 per initialization. The\par
 dateTime2 object is an hour later. However, there is no 2:30 when\par
springing ahead, setting the time to 3:30. Option A is correct because it\par
 is an hour later. Option D is also correct because the hour of the new\par
 time is 3. Option E is not correct because we have changed the time\par
 zone offset due to daylight saving time.\par
 20. A, C. The reverse() method is the easiest way of reversing the\par
 characters in a StringBuilder; therefore, option A is correct. In option\par
 B, substring() returns a String, which is not stored anywhere.\par
 Option C uses method chaining. First, it creates the value "JavavaJ$".\par
 Then, it removes the first three characters, resulting in "avaJ$".\par
 Finally, it removes the last character, resulting in "avaJ". Option D\par
 throws an exception because you cannot delete the character after the\par
 last index. Remember that deleteCharAt() uses indexes that are zero\par
based, and length() counts the number of characters rather than the\par
 index.\par
 21. A. The date starts out as April 30, 2025. Since dates are immutable and\par
 the plus methods\rquote  return values are ignored, the result is unchanged.\par
 Therefore, option A is correct.\par
 22. E. The code first creates a date of 2025-10-31. The chaining in the\par
 output is valid resulting in interim states of 2026-10-31, followed by\par
 2026-05-31, then 2026-06-30, then 2026-06-30, and finally the result\par
 of 2026-06-30T13:04\f0\lang1036 .\lang12\par
}
 